<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.InsightPrep.domain.auth.mapper.PasswordMapper">

    <insert id="upsertPasswordOtp">
        INSERT INTO password_verification
            (email, code_hash, attempts_left, used, expires_at, created_at, reset_used)
        VALUES
            (#{email}, #{codeHash}, #{attemptsLeft}, #{used}, #{expiresAt}, #{createdAt}, FALSE)
        ON CONFLICT (email) DO UPDATE
            SET code_hash    = EXCLUDED.code_hash,
                attempts_left = EXCLUDED.attempts_left,
                used          = EXCLUDED.used,
                expires_at    = EXCLUDED.expires_at,
                created_at    = EXCLUDED.created_at
    </insert>

    <!-- OTP 조회 -->
    <select id="findByEmail" resultType="com.project.InsightPrep.domain.auth.entity.PasswordVerification">
        SELECT id, email, code_hash AS codeHash,
               attempts_left AS attemptsLeft,
               used, expires_at AS expiresAt,
               created_at AS createdAt, used_at AS usedAt,
               reset_token AS resetToken,
               reset_expires_at AS resetExpiresAt,
               reset_used AS resetUsed
        FROM password_verification
        WHERE email = #{email}
    </select>

    <!-- 잘못된 시도 횟수 감소 -->
    <update id="updateAttempts">
        UPDATE password_verification
        SET attempts_left = #{attemptsLeft}
        WHERE email = #{email}
    </update>

    <!-- OTP 사용 처리 (락) -->
    <update id="updateOtpAsUsed">
        UPDATE password_verification
        SET used = TRUE,
            used_at = NOW()
        WHERE email = #{email}
    </update>

    <!-- 비밀번호 재설정 토큰 -->
    <update id="updateResetToken">
        UPDATE password_verification
        SET reset_token      = #{resetToken},
            reset_expires_at = #{resetExpiresAt},
            reset_used       = #{resetUsed}
        WHERE email = #{email}
    </update>

    <select id="findByResetToken" resultType="password">
        SELECT
            id,
            email,
            reset_token     AS resetToken,
            reset_expires_at AS resetExpiresAt,
            reset_used      AS resetUsed
        FROM password_verification
        WHERE reset_token = #{resetToken}
        LIMIT 1
    </select>

    <update id="markResetTokenUsed">
        UPDATE password_verification
        SET reset_used = TRUE,
            used_at    = NOW(),
            reset_token = NULL,
            reset_expires_at = NULL
        WHERE reset_token = #{resetToken}
    </update>

</mapper>